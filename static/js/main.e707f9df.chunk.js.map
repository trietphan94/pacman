{"version":3,"sources":["pacman.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","PacMan","src","pacmanIcon","alt","width","height","style","margin","InitTable","props","foodList","pacman","listItems","i","j","yLocation","xLocation","push","key","find","food","y","className","icon","faCircle","color","clear","App","_handleKeyDown","e","keyCode","state","setState","prevState","console","log","totalFoods","x","bind","document","addEventListener","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e707f9df.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pacman.f00e90b0.png\";","import React from 'react';\nimport './App.css';\nimport pacmanIcon from './pacman.png';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\nimport {faCircle} from '@fortawesome/free-solid-svg-icons'\n\nfunction PacMan() {\n  return <span><img src={pacmanIcon} alt=\"pacman\" width=\"20px\"\n                    height=\"20px\" style={{margin: '0px 2.5px'}}></img></span>;\n}\n\nfunction InitTable(props) {\n  const width = props.width;\n  const height = props.height;\n  const foodList = props.foodList;\n  let pacman = props.pacman;\n  let listItems = [];\n  for (let i = 0; i < width; i++) {\n    for (let j = 0; j < height; j++) {\n      if (i === pacman.yLocation && j === pacman.xLocation) {\n        listItems.push(<PacMan key={i + '-' + j}/>)\n      } else {\n        // let isFood = foodList.find(food => food.x === j && food.y === i);\n        //Test\n        let isFood = foodList.find(food => food.y === i);\n        if (isFood) {\n          listItems.push(<span className=\"block\"><FontAwesomeIcon icon={faCircle} color=\"white\"\n                                                                  className=\"food\"/></span>)\n        } else {\n          listItems.push(<span key={i + '-' + j} className=\"block\"></span>)\n        }\n      }\n    }\n    listItems.push(<div style={{clear: 'both'}} key={i}/>)\n  }\n\n  return (\n    <div className=\"wrapper\"> {listItems}</div>\n  );\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      width: 20,\n      height: 30,\n      pacman: {\n        xLocation: 0,\n        yLocation: 0,\n        totalFoods: 0\n      },\n      foodList: [\n        {\n          x: 3,\n          y: 4\n        },\n        {\n          x: 1,\n          y: 2\n        }\n      ]\n    };\n\n    this._handleKeyDown = this._handleKeyDown.bind(this);\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this._handleKeyDown);\n  }\n\n\n  componentWillUnmount() {\n    document.addEventListener(\"keydown\", this._handleKeyDown);\n  }\n\n  _handleKeyDown = (e) => {\n    if (e.keyCode === 38) {\n      if (this.state.pacman.yLocation > 0) {\n        this.setState(prevState => ({\n          pacman: {\n            ...prevState.pacman,\n            yLocation: prevState.pacman.yLocation - 1\n          }\n        }));\n      }\n      console.log('Up');\n    } else if (e.keyCode === 40) {\n      console.log('Down');\n\n      if (this.state.pacman.yLocation < this.state.width - 1) {\n        this.setState(prevState => ({\n          pacman: {\n            ...prevState.pacman,\n            yLocation: prevState.pacman.yLocation + 1\n          }\n        }));\n      }\n    } else if (e.keyCode === 39) {\n      console.log('Right');\n      if (this.state.pacman.xLocation < this.state.height - 1) {\n        this.setState(prevState => ({\n          pacman: {\n            ...prevState.pacman,\n            xLocation: prevState.pacman.xLocation + 1\n          }\n        }));\n      }\n    } else if (e.keyCode === 37) {\n      console.log('Left');\n\n      if (this.state.pacman.xLocation > 0) {\n        this.setState(prevState => ({\n          pacman: {\n            ...prevState.pacman,\n            xLocation: prevState.pacman.xLocation - 1\n          }\n        }));\n      }\n    }\n  };\n\n\n  render() {\n\n    return (\n      <div>\n        <InitTable width={this.state.width} height={this.state.height} pacman={this.state.pacman}\n                   foodList={this.state.foodList}/>\n      </div>\n\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}